/* Copyright Â© 2017 VMware, Inc. All Rights Reserved.
   SPDX-License-Identifier: BSD-2-Clause

   Generated by: https://github.com/swagger-api/swagger-codegen.git */

package manager

import (
	"github.com/vmware/go-vmware-nsxt/common"
)

type NatRule struct {

	// The server will populate this field when returning the resource. Ignored on PUT and POST.
	Links []common.ResourceLink `json:"_links,omitempty"`

	Schema string `json:"_schema,omitempty"`

	Self *common.SelfResourceLink `json:"_self,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected.
	Revision int64 `json:"_revision"`

	// Timestamp of resource creation
	CreateTime int64 `json:"_create_time,omitempty"`

	// ID of the user who created this resource
	CreateUser string `json:"_create_user,omitempty"`

	// Timestamp of last modification
	LastModifiedTime int64 `json:"_last_modified_time,omitempty"`

	// ID of the user who last modified this resource
	LastModifiedUser string `json:"_last_modified_user,omitempty"`

	// Indicates system owned resource
	SystemOwned bool `json:"_system_owned,omitempty"`

	// Description of this resource
	Description string `json:"description,omitempty"`

	// Defaults to ID if not set
	DisplayName string `json:"display_name,omitempty"`

	// Unique identifier of this resource
	Id string `json:"id,omitempty"`

	// The type of this resource.
	ResourceType string `json:"resource_type,omitempty"`

	// Opaque identifiers meaningful to the API user
	Tags []common.Tag `json:"tags,omitempty"`

	// valid actions: SNAT, DNAT, NO_NAT, REFLEXIVE. All rules in a logical router are either stateless or stateful. Mix is not supported. SNAT and DNAT are stateful, can NOT be supported when the logical router is running at active-active HA mode; REFLEXIVE is stateless. NO_NAT has no translated_fields, only match fields.
	Action string `json:"action"`

	// enable/disable the rule
	Enabled bool `json:"enabled"`

	// enable/disable the logging of rule
	Logging bool `json:"logging"`

	// Logical router id
	LogicalRouterId string `json:"logical_router_id,omitempty"`

	// IP Address | CIDR | (null implies Any)
	MatchDestinationNetwork string `json:"match_destination_network,omitempty"`

	// A NSServiceElement that specifies the matching services of source ports, destination ports, ip protocol version and number, sub protocol version and number, ICMP type and code, etc.
	MatchService *NsServiceElement `json:"match_service,omitempty"`

	// IP Address | CIDR | (null implies Any)
	MatchSourceNetwork string `json:"match_source_network,omitempty"`

	// Default is true. If the nat_pass is set to true, the following firewall stage will be skipped. Please note, if action is NO_NAT, then nat_pass must be set to true or omitted.
	NatPass bool `json:"nat_pass"`

	// Ascending, valid range [0-2147483647]. If multiple rules have the same priority, evaluation sequence is undefined.
	RulePriority int64 `json:"rule_priority,omitempty"`

	// IP Address | IP Range | CIDR
	TranslatedNetwork string `json:"translated_network,omitempty"`

	// port number or port range. DNAT only
	TranslatedPorts string `json:"translated_ports,omitempty"`
}
